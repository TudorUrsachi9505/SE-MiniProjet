Aceasta este prima parte din proiect,in principiu o sa scriem o parte din modelul pe care v-a avea loc exercitiul 
si o parte din cod deoarece inca ne gandim la el.

empty=" "
wall="0"
start="A"
end="B"
visited="-"
good="x"

LABYRINTH = """
0000000000000000000000000000000000000000000000000000000000000
A        0              0        0        0     0           0
0  0000  0000  0000000  0  0000  0  0000  0  0  0  0000000  0
0  0  0     0  0     0  0     0     0  0  0  0  0  0        0
0  0  0000  0  0000  0  0  0  0000000  0  0000  0000  0000000
0  0     0     0     0  0  0  0        0     0  0     0     0
0  0000  0  0000  0000  0000  0  0000000000  0  0  0000  0000
0  0     0     0     0  0     0  0     0  0     0  0        0
0  0  0000000000000  0  0  0000  0  0  0  0000000  0000  0  0
0        0        0              0  0     0        0     0  0
0000  0000  0  0000000  0  0000000  0000  0  0000000  0000  0
0     0     0  0        0  0        0     0  0        0     0
0  0000  0000000  0000000  0  0000000  0000  0  0000000  0000
0  0              0           0     0     0     0           0
0000  0000000000000  0000000000  0  0000  0000  0  0000000000
0     0           0     0     0  0     0        0  0        0
0  0000  0000000  0  0  0  0  0000000  0000000000  0  0000  0
0     0  0        0  0     0  0        0        0  0  0     0
0000  0000  0000000000000000  0  0000000  0000  0  0  0  0000
0  0  0     0                 0  0     0  0     0     0     0
0  0  0  0000  0000000000000000  0  0  0  0000000000000  0  0
0  0  0     0  0     0        0  0  0     0           0  0  0
0  0  0  0  0  0  0  0  0000  0  0  0000000  0000000  0  0  0
0  0  0  0  0     0  0  0     0  0     0     0     0     0  0
0  0  0000  0000000  0  0000000  0000  0000  0  0  0000000  0

Apoi vom verifica daca elementele matricei sunt vizitate sau nu.
Verificarea se realizeaza prin refacerea traseului si unde gaseste o cale blocata se intoarce.

def solve(labyrinth, x, y, m, n):
    path = False
    if 0 <= x < m and 0 <= y < n:
        if labyrinth[y][x] in (empty, start):
            if labyrinth[y][x] == empty:
               labyrinth[y][x] = visited

0     0           0  0     0  0     0           0  0     0  0
0  0000  0000000000  0000  0  0  0  0000000  0000  0  0  0  0
0                 0  0     0     0  0        0     0  0  0  0
0000000000000000  0  0  0000000000  0  0000000  0000000  0  0
0     0           0     0        0  0  0     0           0  0
0  0000  0000000000  0000  0  0000  0  0  0000000000000000  0
0        0        0  0     0        0  0                 0  0
0000000000  0  0  0  0  0  0000000000  0000000000000000  0  0
0           0  0  0  0  0                 0                 0
0  0000000000  0000  0000000000000000000000  0000000000000  0
0           0        0              0        0     0        0
0000000000  0000000000  0000000000  0  0000  0  0000  0000000
0           0           0        0     0     0        0     0
0  0000000000  0000000000  0000000000000  0000000000000  0  0
0           0  0           0           0     0           0  0
0000000000  0  0  0000000000  0000  0000000  0  0000000000  0
0     0     0     0        0     0  0     0  0  0     0     0
0  0  0  0000000000  0000  0000  0  0  0  0000  0  0000  0000
0  0  0              0  0  0     0     0     0        0     0
0  0  0000000000000000  0  0  0  0000000000  0000  0  0000  0
0  0     0              0     0  0        0     0  0     0  0
0  0000  0  0000000  0000000000000  0000000000  0  0000000  0
0  0              0  0     0     0                 0        0
0  0000000  0  0000  0  0000  0  0000  0000  0  0000  0000000
0        0  0     0  0        0  0        0  0     0  0     0
0  0000  0  0000  0  0  0000000  0000000000  0000000  0000  0
0  0  0  0  0     0  0     0     0           0     0        0
0  0  0  0000  0000  0000  0  0000  0000000000  0  0000000000
0     0  0     0     0  0  0     0              0     0     0
0000000  0  0000000  0  0  0000  0  0000000000000000  0000  0
0        0     0     0  0  0  0     0                 0     0
0  0000000000  0  0000  0  0  0000  0  0000000000000000  0000
0  0     0     0        0  0        0  0     0        0  0  0
0  0  0  0  0000000000000  0000000  0  0  0  0000000  0  0  0
0     0  0                 0        0     0                 B
0000000000000000000000000000000000000000000000000000000000000

""" //Aceasta este a doua jumatate din modelul de labirint
//Puteti observa ca in model am inclus un drum de la A la B.

//Acum urmeaza continuarea codului din Part1

if (solve(labyrinth, x+1, y, m, n) or solve(labyrinth, x-1, y, m, n) or solve(labyrinth, x, y+1, m, n) or solve(labyrinth, x, y-1, m, n)):
                if labyrinth[y][x] == visited:
                    labyrinth[y][x] = good
                path = True
        elif labyrinth[y][x] == end:
            path = True
    return path
    
/*labirintul-formeaza o lista de caractere pentru labirint
x-este pozitia lui x
y-este pozitia lui y
m,n-este dimensiunea matricei(cu m linii si n coloane)*/

//Urmeaza sa includem metoda main in ultima parte a proiectului


def main():
    labyrinth = [list(x) for x in LABYRINTH.splitlines() if x]
    solve(labyrinth, 0, 1, len(labyrinth[0]), len(labyrinth))
    for line in labyrinth:
        print ("".join(line))

if __name__ == "__main__":
    main()

"""Aici este metoda MAIN prin care gasim solutia labirintului"""
